// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

model User {
  id        Int   @id @default(autoincrement())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  phone     String?
  role      Role     @default(USER)
  avatar    String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  addresses Address[]
  orders    Order[]
  cart      CartItem[]
  favorites Favorite[]

  @@index([email])
  @@index([role])
  @@index([isActive])
  @@index([createdAt])
  @@map("users")
}

model Address {
  id       String  @id @default(cuid())
  userId   Int
  street   String
  city     String
  state    String
  zipCode  String
  country  String
  isDefault Boolean @default(false)

  // Relations
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders Order[]

  @@map("addresses")
}

model Collection {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  image       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  products Product[]

  @@map("collections")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  image       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  subcategories Subcategory[]
  products      Product[]

  @@map("categories")
}

model Subcategory {
  id          String   @id @default(cuid())
  name        String
  description String?
  image       String?
  categoryId  String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  category Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  products Product[]

  @@unique([name, categoryId])
  @@map("subcategories")
}

model Product {
  id            String   @id @default(cuid())
  name          String
  description   String
  price         Float
  stock         Int      @default(0)
  sku           String?  @unique
  categoryId    String
  subcategoryId String?
  collectionId  String?
  isActive      Boolean  @default(true)
  isFeatured    Boolean  @default(false)
  isOnSale      Boolean  @default(false)
  salePrice     Float?
  saleBadge     String?  // e.g., "Sale", "-30%", "Limited Time"
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  category     Category      @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  subcategory  Subcategory?  @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  collection   Collection?   @relation(fields: [collectionId], references: [id], onDelete: SetNull)
  images       ProductImage[]
  variants     ProductVariant[]
  cartItems    CartItem[]
  orderItems   OrderItem[]
  favorites    Favorite[]
  sales        Sale[]

  @@index([categoryId])
  @@index([subcategoryId])
  @@index([collectionId])
  @@index([isActive])
  @@index([isFeatured])
  @@index([price])
  @@index([stock])
  @@index([createdAt])
  @@index([name])
  @@map("products")
}

model ProductImage {
  id        String   @id @default(cuid())
  productId String
  url       String
  color     String?
  isMain    Boolean  @default(false)
  order     Int      @default(0)
  createdAt DateTime @default(now())

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model ProductVariant {
  id        String   @id @default(cuid())
  productId String
  color     String
  size      String
  stock     Int      @default(0)
  price     Float?
  sku       String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, color, size])
  @@map("product_variants")
}

model Sale {
  id              String    @id @default(cuid())
  name            String
  description     String?
  discountType    String    // 'percentage' or 'fixed'
  discountValue   Float
  startDate       DateTime
  endDate         DateTime
  isActive        Boolean   @default(true)
  minimumOrder    Float?
  maximumDiscount Float?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  products Product[]

  @@map("sales")
}

model CartItem {
  id        String   @id @default(cuid())
  userId    Int
  productId String
  quantity  Int      @default(1)
  color     String?
  size      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId, color, size])
  @@index([userId])
  @@index([productId])
  @@index([createdAt])
  @@map("cart_items")
}

model Favorite {
  id        String   @id @default(cuid())
  userId    Int
  productId String
  createdAt DateTime @default(now())

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([userId])
  @@index([productId])
  @@index([createdAt])
  @@map("favorites")
}

model   Order {
  id            String        @id @default(cuid())
  userId        Int
  addressId     String
  status        OrderStatus   @default(PENDING)
  paymentStatus PaymentStatus @default(PENDING)
  subtotal      Float
  shipping      Float         @default(0)
  tax           Float         @default(0)
  total         Float
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  user    User        @relation(fields: [userId], references: [id])
  address Address     @relation(fields: [addressId], references: [id])
  items   OrderItem[]

  @@index([userId])
  @@index([status])
  @@index([paymentStatus])
  @@index([createdAt])
  @@index([updatedAt])
  @@map("orders")
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  color     String?
  size      String?
  price     Float
  createdAt DateTime @default(now())

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("order_items")
}
